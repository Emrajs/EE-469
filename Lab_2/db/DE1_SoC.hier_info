|alu_64bit
a[0] => a[0].IN1
a[1] => a[1].IN1
a[2] => a[2].IN1
a[3] => a[3].IN1
a[4] => a[4].IN1
a[5] => a[5].IN1
a[6] => a[6].IN1
a[7] => a[7].IN1
a[8] => a[8].IN1
a[9] => a[9].IN1
a[10] => a[10].IN1
a[11] => a[11].IN1
a[12] => a[12].IN1
a[13] => a[13].IN1
a[14] => a[14].IN1
a[15] => a[15].IN1
a[16] => a[16].IN1
a[17] => a[17].IN1
a[18] => a[18].IN1
a[19] => a[19].IN1
a[20] => a[20].IN1
a[21] => a[21].IN1
a[22] => a[22].IN1
a[23] => a[23].IN1
a[24] => a[24].IN1
a[25] => a[25].IN1
a[26] => a[26].IN1
a[27] => a[27].IN1
a[28] => a[28].IN1
a[29] => a[29].IN1
a[30] => a[30].IN1
a[31] => a[31].IN1
a[32] => a[32].IN1
a[33] => a[33].IN1
a[34] => a[34].IN1
a[35] => a[35].IN1
a[36] => a[36].IN1
a[37] => a[37].IN1
a[38] => a[38].IN1
a[39] => a[39].IN1
a[40] => a[40].IN1
a[41] => a[41].IN1
a[42] => a[42].IN1
a[43] => a[43].IN1
a[44] => a[44].IN1
a[45] => a[45].IN1
a[46] => a[46].IN1
a[47] => a[47].IN1
a[48] => a[48].IN1
a[49] => a[49].IN1
a[50] => a[50].IN1
a[51] => a[51].IN1
a[52] => a[52].IN1
a[53] => a[53].IN1
a[54] => a[54].IN1
a[55] => a[55].IN1
a[56] => a[56].IN1
a[57] => a[57].IN1
a[58] => a[58].IN1
a[59] => a[59].IN1
a[60] => a[60].IN1
a[61] => a[61].IN1
a[62] => a[62].IN1
a[63] => a[63].IN1
b[0] => b[0].IN1
b[1] => b[1].IN1
b[2] => b[2].IN1
b[3] => b[3].IN1
b[4] => b[4].IN1
b[5] => b[5].IN1
b[6] => b[6].IN1
b[7] => b[7].IN1
b[8] => b[8].IN1
b[9] => b[9].IN1
b[10] => b[10].IN1
b[11] => b[11].IN1
b[12] => b[12].IN1
b[13] => b[13].IN1
b[14] => b[14].IN1
b[15] => b[15].IN1
b[16] => b[16].IN1
b[17] => b[17].IN1
b[18] => b[18].IN1
b[19] => b[19].IN1
b[20] => b[20].IN1
b[21] => b[21].IN1
b[22] => b[22].IN1
b[23] => b[23].IN1
b[24] => b[24].IN1
b[25] => b[25].IN1
b[26] => b[26].IN1
b[27] => b[27].IN1
b[28] => b[28].IN1
b[29] => b[29].IN1
b[30] => b[30].IN1
b[31] => b[31].IN1
b[32] => b[32].IN1
b[33] => b[33].IN1
b[34] => b[34].IN1
b[35] => b[35].IN1
b[36] => b[36].IN1
b[37] => b[37].IN1
b[38] => b[38].IN1
b[39] => b[39].IN1
b[40] => b[40].IN1
b[41] => b[41].IN1
b[42] => b[42].IN1
b[43] => b[43].IN1
b[44] => b[44].IN1
b[45] => b[45].IN1
b[46] => b[46].IN1
b[47] => b[47].IN1
b[48] => b[48].IN1
b[49] => b[49].IN1
b[50] => b[50].IN1
b[51] => b[51].IN1
b[52] => b[52].IN1
b[53] => b[53].IN1
b[54] => b[54].IN1
b[55] => b[55].IN1
b[56] => b[56].IN1
b[57] => b[57].IN1
b[58] => b[58].IN1
b[59] => b[59].IN1
b[60] => b[60].IN1
b[61] => b[61].IN1
b[62] => b[62].IN1
b[63] => b[63].IN1
cntrl[0] => cntrl[0].IN1
cntrl[1] => cntrl[1].IN64
cntrl[2] => cntrl[2].IN64
result[0] <= alu_1bit:firstAlu.out
result[1] <= alu_1bit:makeAlu[1].largeAlu.out
result[2] <= alu_1bit:makeAlu[2].largeAlu.out
result[3] <= alu_1bit:makeAlu[3].largeAlu.out
result[4] <= alu_1bit:makeAlu[4].largeAlu.out
result[5] <= alu_1bit:makeAlu[5].largeAlu.out
result[6] <= alu_1bit:makeAlu[6].largeAlu.out
result[7] <= alu_1bit:makeAlu[7].largeAlu.out
result[8] <= alu_1bit:makeAlu[8].largeAlu.out
result[9] <= alu_1bit:makeAlu[9].largeAlu.out
result[10] <= alu_1bit:makeAlu[10].largeAlu.out
result[11] <= alu_1bit:makeAlu[11].largeAlu.out
result[12] <= alu_1bit:makeAlu[12].largeAlu.out
result[13] <= alu_1bit:makeAlu[13].largeAlu.out
result[14] <= alu_1bit:makeAlu[14].largeAlu.out
result[15] <= alu_1bit:makeAlu[15].largeAlu.out
result[16] <= alu_1bit:makeAlu[16].largeAlu.out
result[17] <= alu_1bit:makeAlu[17].largeAlu.out
result[18] <= alu_1bit:makeAlu[18].largeAlu.out
result[19] <= alu_1bit:makeAlu[19].largeAlu.out
result[20] <= alu_1bit:makeAlu[20].largeAlu.out
result[21] <= alu_1bit:makeAlu[21].largeAlu.out
result[22] <= alu_1bit:makeAlu[22].largeAlu.out
result[23] <= alu_1bit:makeAlu[23].largeAlu.out
result[24] <= alu_1bit:makeAlu[24].largeAlu.out
result[25] <= alu_1bit:makeAlu[25].largeAlu.out
result[26] <= alu_1bit:makeAlu[26].largeAlu.out
result[27] <= alu_1bit:makeAlu[27].largeAlu.out
result[28] <= alu_1bit:makeAlu[28].largeAlu.out
result[29] <= alu_1bit:makeAlu[29].largeAlu.out
result[30] <= alu_1bit:makeAlu[30].largeAlu.out
result[31] <= alu_1bit:makeAlu[31].largeAlu.out
result[32] <= alu_1bit:makeAlu[32].largeAlu.out
result[33] <= alu_1bit:makeAlu[33].largeAlu.out
result[34] <= alu_1bit:makeAlu[34].largeAlu.out
result[35] <= alu_1bit:makeAlu[35].largeAlu.out
result[36] <= alu_1bit:makeAlu[36].largeAlu.out
result[37] <= alu_1bit:makeAlu[37].largeAlu.out
result[38] <= alu_1bit:makeAlu[38].largeAlu.out
result[39] <= alu_1bit:makeAlu[39].largeAlu.out
result[40] <= alu_1bit:makeAlu[40].largeAlu.out
result[41] <= alu_1bit:makeAlu[41].largeAlu.out
result[42] <= alu_1bit:makeAlu[42].largeAlu.out
result[43] <= alu_1bit:makeAlu[43].largeAlu.out
result[44] <= alu_1bit:makeAlu[44].largeAlu.out
result[45] <= alu_1bit:makeAlu[45].largeAlu.out
result[46] <= alu_1bit:makeAlu[46].largeAlu.out
result[47] <= alu_1bit:makeAlu[47].largeAlu.out
result[48] <= alu_1bit:makeAlu[48].largeAlu.out
result[49] <= alu_1bit:makeAlu[49].largeAlu.out
result[50] <= alu_1bit:makeAlu[50].largeAlu.out
result[51] <= alu_1bit:makeAlu[51].largeAlu.out
result[52] <= alu_1bit:makeAlu[52].largeAlu.out
result[53] <= alu_1bit:makeAlu[53].largeAlu.out
result[54] <= alu_1bit:makeAlu[54].largeAlu.out
result[55] <= alu_1bit:makeAlu[55].largeAlu.out
result[56] <= alu_1bit:makeAlu[56].largeAlu.out
result[57] <= alu_1bit:makeAlu[57].largeAlu.out
result[58] <= alu_1bit:makeAlu[58].largeAlu.out
result[59] <= alu_1bit:makeAlu[59].largeAlu.out
result[60] <= alu_1bit:makeAlu[60].largeAlu.out
result[61] <= alu_1bit:makeAlu[61].largeAlu.out
result[62] <= alu_1bit:makeAlu[62].largeAlu.out
result[63] <= alu_1bit:sixtyFourthAlu.out
negative <= <GND>
zero <= zero_flag:check.checkZero
overflow <= <GND>
carry_out <= alu_1bit:sixtyFourthAlu.Cout


|alu_64bit|alu_1bit:firstAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:firstAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:firstAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:firstAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:firstAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:firstAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[1].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[1].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[1].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[1].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[1].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[1].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[2].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[2].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[2].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[2].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[2].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[2].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[3].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[3].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[3].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[3].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[3].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[3].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[4].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[4].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[4].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[4].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[4].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[4].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[5].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[5].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[5].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[5].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[5].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[5].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[6].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[6].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[6].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[6].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[6].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[6].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[7].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[7].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[7].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[7].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[7].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[7].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[8].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[8].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[8].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[8].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[8].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[8].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[9].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[9].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[9].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[9].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[9].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[9].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[10].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[10].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[10].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[10].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[10].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[10].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[11].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[11].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[11].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[11].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[11].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[11].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[12].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[12].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[12].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[12].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[12].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[12].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[13].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[13].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[13].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[13].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[13].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[13].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[14].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[14].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[14].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[14].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[14].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[14].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[15].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[15].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[15].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[15].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[15].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[15].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[16].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[16].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[16].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[16].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[16].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[16].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[17].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[17].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[17].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[17].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[17].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[17].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[18].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[18].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[18].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[18].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[18].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[18].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[19].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[19].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[19].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[19].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[19].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[19].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[20].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[20].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[20].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[20].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[20].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[20].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[21].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[21].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[21].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[21].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[21].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[21].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[22].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[22].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[22].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[22].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[22].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[22].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[23].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[23].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[23].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[23].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[23].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[23].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[24].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[24].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[24].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[24].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[24].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[24].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[25].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[25].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[25].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[25].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[25].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[25].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[26].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[26].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[26].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[26].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[26].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[26].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[27].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[27].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[27].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[27].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[27].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[27].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[28].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[28].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[28].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[28].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[28].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[28].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[29].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[29].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[29].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[29].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[29].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[29].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[30].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[30].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[30].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[30].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[30].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[30].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[31].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[31].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[31].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[31].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[31].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[31].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[32].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[32].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[32].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[32].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[32].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[32].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[33].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[33].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[33].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[33].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[33].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[33].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[34].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[34].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[34].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[34].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[34].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[34].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[35].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[35].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[35].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[35].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[35].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[35].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[36].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[36].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[36].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[36].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[36].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[36].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[37].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[37].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[37].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[37].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[37].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[37].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[38].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[38].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[38].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[38].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[38].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[38].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[39].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[39].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[39].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[39].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[39].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[39].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[40].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[40].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[40].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[40].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[40].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[40].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[41].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[41].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[41].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[41].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[41].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[41].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[42].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[42].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[42].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[42].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[42].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[42].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[43].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[43].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[43].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[43].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[43].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[43].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[44].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[44].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[44].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[44].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[44].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[44].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[45].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[45].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[45].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[45].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[45].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[45].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[46].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[46].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[46].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[46].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[46].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[46].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[47].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[47].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[47].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[47].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[47].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[47].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[48].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[48].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[48].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[48].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[48].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[48].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[49].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[49].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[49].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[49].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[49].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[49].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[50].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[50].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[50].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[50].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[50].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[50].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[51].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[51].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[51].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[51].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[51].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[51].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[52].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[52].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[52].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[52].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[52].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[52].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[53].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[53].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[53].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[53].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[53].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[53].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[54].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[54].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[54].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[54].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[54].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[54].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[55].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[55].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[55].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[55].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[55].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[55].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[56].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[56].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[56].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[56].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[56].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[56].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[57].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[57].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[57].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[57].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[57].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[57].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[58].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[58].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[58].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[58].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[58].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[58].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[59].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[59].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[59].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[59].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[59].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[59].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[60].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[60].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[60].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[60].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[60].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[60].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[61].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[61].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[61].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[61].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[61].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[61].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[62].largeAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:makeAlu[62].largeAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[62].largeAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:makeAlu[62].largeAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[62].largeAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:makeAlu[62].largeAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:sixtyFourthAlu
a => and1.IN0
a => or1.IN0
a => xor1.IN0
a => fullAdder_1bit:submodule1.a
b => and1.IN1
b => or1.IN1
b => xor1.IN1
b => fullAdder_1bit:submodule1.b
b => mux8_1:submodule2.in[0]
out <= mux8_1:submodule2.out
Cin => fullAdder_1bit:submodule1.Cin
Cout <= fullAdder_1bit:submodule1.Cout
en[0] => mux8_1:submodule2.sel[0]
en[1] => mux8_1:submodule2.sel[1]
en[2] => mux8_1:submodule2.sel[2]


|alu_64bit|alu_1bit:sixtyFourthAlu|fullAdder_1bit:submodule1
a => xor1.IN0
a => and1.IN0
a => and2.IN0
b => xor1.IN1
b => and1.IN1
b => and3.IN0
out <= or1.DB_MAX_OUTPUT_PORT_TYPE
Cin => xor1.IN2
Cin => and2.IN1
Cin => and3.IN1
Cout <= xor1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:sixtyFourthAlu|mux8_1:submodule2
in[0] => in[0].IN1
in[1] => in[1].IN1
in[2] => in[2].IN1
in[3] => in[3].IN1
in[4] => in[4].IN1
in[5] => in[5].IN1
in[6] => in[6].IN1
in[7] => in[7].IN1
sel[0] => sel[0].IN2
sel[1] => sel[1].IN2
sel[2] => sel[2].IN1
out <= mux2_1:mux3.out


|alu_64bit|alu_1bit:sixtyFourthAlu|mux8_1:submodule2|mux_4_1:mux1
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:sixtyFourthAlu|mux8_1:submodule2|mux_4_1:mux2
in[0] => and1.IN0
in[1] => and2.IN0
in[2] => and3.IN0
in[3] => and4.IN0
sel[0] => and2.IN1
sel[0] => and4.IN1
sel[0] => and1.IN1
sel[0] => and3.IN1
sel[1] => and3.IN2
sel[1] => and4.IN2
sel[1] => and1.IN2
sel[1] => and2.IN2
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|alu_1bit:sixtyFourthAlu|mux8_1:submodule2|mux2_1:mux3
in[0] => and1.IN0
in[1] => and2.IN0
sel => and2.IN1
sel => and1.IN1
out <= or1.DB_MAX_OUTPUT_PORT_TYPE


|alu_64bit|zero_flag:check
result[0] => nor1.IN0
result[1] => nor1.IN1
result[2] => nor1.IN2
result[3] => nor1.IN3
result[4] => nor2.IN0
result[5] => nor2.IN1
result[6] => nor2.IN2
result[7] => nor2.IN3
result[8] => nor3.IN0
result[9] => nor3.IN1
result[10] => nor3.IN2
result[11] => nor3.IN3
result[12] => nor4.IN0
result[13] => nor4.IN1
result[14] => nor4.IN2
result[15] => nor4.IN3
result[16] => nor5.IN0
result[17] => nor5.IN1
result[18] => nor5.IN2
result[19] => nor5.IN3
result[20] => nor6.IN0
result[21] => nor6.IN1
result[22] => nor6.IN2
result[23] => nor6.IN3
result[24] => nor7.IN0
result[25] => nor7.IN1
result[26] => nor7.IN2
result[27] => nor7.IN3
result[28] => nor8.IN0
result[29] => nor8.IN1
result[30] => nor8.IN2
result[31] => nor8.IN3
result[32] => ~NO_FANOUT~
result[33] => ~NO_FANOUT~
result[34] => ~NO_FANOUT~
result[35] => ~NO_FANOUT~
result[36] => ~NO_FANOUT~
result[37] => ~NO_FANOUT~
result[38] => ~NO_FANOUT~
result[39] => ~NO_FANOUT~
result[40] => ~NO_FANOUT~
result[41] => ~NO_FANOUT~
result[42] => ~NO_FANOUT~
result[43] => ~NO_FANOUT~
result[44] => ~NO_FANOUT~
result[45] => ~NO_FANOUT~
result[46] => ~NO_FANOUT~
result[47] => ~NO_FANOUT~
result[48] => ~NO_FANOUT~
result[49] => ~NO_FANOUT~
result[50] => ~NO_FANOUT~
result[51] => ~NO_FANOUT~
result[52] => ~NO_FANOUT~
result[53] => ~NO_FANOUT~
result[54] => ~NO_FANOUT~
result[55] => ~NO_FANOUT~
result[56] => ~NO_FANOUT~
result[57] => ~NO_FANOUT~
result[58] => ~NO_FANOUT~
result[59] => ~NO_FANOUT~
result[60] => ~NO_FANOUT~
result[61] => ~NO_FANOUT~
result[62] => ~NO_FANOUT~
result[63] => ~NO_FANOUT~
checkZero <= and5.DB_MAX_OUTPUT_PORT_TYPE


